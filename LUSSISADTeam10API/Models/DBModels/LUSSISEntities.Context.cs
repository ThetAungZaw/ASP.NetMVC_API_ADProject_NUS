//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LUSSISADTeam10API.Models.DBModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LUSSISEntities : DbContext
    {
        public LUSSISEntities()
            : base("name=LUSSISEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<adjustment> adjustments { get; set; }
        public virtual DbSet<adjustmentdetail> adjustmentdetails { get; set; }
        public virtual DbSet<category> categories { get; set; }
        public virtual DbSet<collectionpoint> collectionpoints { get; set; }
        public virtual DbSet<delegation> delegations { get; set; }
        public virtual DbSet<department> departments { get; set; }
        public virtual DbSet<departmentcollectionpoint> departmentcollectionpoints { get; set; }
        public virtual DbSet<disbursement> disbursements { get; set; }
        public virtual DbSet<disbursementdetail> disbursementdetails { get; set; }
        public virtual DbSet<disbursementlocker> disbursementlockers { get; set; }
        public virtual DbSet<inventory> inventories { get; set; }
        public virtual DbSet<inventorytransaction> inventorytransactions { get; set; }
        public virtual DbSet<item> items { get; set; }
        public virtual DbSet<lockercollectionpoint> lockercollectionpoints { get; set; }
        public virtual DbSet<notification> notifications { get; set; }
        public virtual DbSet<outstandingrequisition> outstandingrequisitions { get; set; }
        public virtual DbSet<outstandingrequisitiondetail> outstandingrequisitiondetails { get; set; }
        public virtual DbSet<purchaseorder> purchaseorders { get; set; }
        public virtual DbSet<purchaseorderdetail> purchaseorderdetails { get; set; }
        public virtual DbSet<requisition> requisitions { get; set; }
        public virtual DbSet<requisitiondetail> requisitiondetails { get; set; }
        public virtual DbSet<supplier> suppliers { get; set; }
        public virtual DbSet<supplieritem> supplieritems { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<user> users { get; set; }
    
        public virtual ObjectResult<SPItemTrendAnalysis_Result> SPItemTrendAnalysis(Nullable<int> month, Nullable<int> category)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPItemTrendAnalysis_Result>("SPItemTrendAnalysis", monthParameter, categoryParameter);
        }
    
        public virtual ObjectResult<SPItemUsageReport_Result> SPItemUsageReport(Nullable<int> month, Nullable<int> item)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var itemParameter = item.HasValue ?
                new ObjectParameter("item", item) :
                new ObjectParameter("item", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPItemUsageReport_Result>("SPItemUsageReport", monthParameter, itemParameter);
        }
    
        public virtual ObjectResult<SPRequistionList_Result> SPRequistionList(Nullable<int> deptid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var deptidParameter = deptid.HasValue ?
                new ObjectParameter("deptid", deptid) :
                new ObjectParameter("deptid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPRequistionList_Result>("SPRequistionList", deptidParameter, fromdateParameter, todateParameter);
        }
    }
}
